heat_template_version: queens

parameters:
  database_image:
    type: string
    description: Name of image to use for servers
    default: 'Ubuntu-18.04'
  database_network_cidr:
    type: string
    description: The CIDR of database network.
    default: '10.10.10.0/24'
  database_admin_password:
    type: string
    description: The root password for database
    default: 'r00tme'
  app_network_cidr:
    type: string
    description: The CIDR of application network.
    default: '10.10.11.0/24'
  cluster_public_key:
    type: string
    default: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCp0evjOaK8c8SKYK4r2+0BN7g+8YSvQ2n8nFgOURCyvkJqOHi1qPGZmuN0CclYVdVuZiXbWw3VxRbSW3EH736VzgY1U0JmoTiSamzLHaWsXvEIW8VCi7boli539QJP0ikJiBaNAgZILyCrVPN+A6mfqtacs1KXdZ0zlMq1BPtFciR1JTCRcVs5vP2Wwz5QtY2jMIh3aiwkePjMTQPcfmh1TkOlxYu5IbQyZ3G1ahA0mNKI9a0dtF282av/F6pwB/N1R1nEZ/9VtcN2I1mf1NW/tTHEEcTzXYo1R/8K9vlqAN8QvvGLZtZduGviNVNoNWvoxaXxDt8CPv2B2NCdQFZp'
  database_flavor:
    type: string
    default: 'm1.tiny_test' # vcpu: 1, RAM: 512, disk: 5Gb
  public_network_id:
    type: string
    default: 'public'
  app_docker_image:
    type: string
    default: 'mirantis.azurecr.io/openstack/openstack-refapp:0.0.1.dev20'
    description: The link to docker image with App
  dns_nameservers:
    type: json
    default: []
  app_port:
    type: number
    default: 8000
  instance_01_az:
    type: string
    default: 'nova'
  instance_02_az:
    type: string
    default: 'nova'
  instance_03_az:
    type: string
    default: 'nova'
  key_name:
    type: string
    default: 'refapp'
  volume_size:
    type: number
    description: The size of volume
    default: 1
  boot_timeout:
    type: number
    description: Boot timeout for instance
    default: 3600

resources:
  random:
    type: OS::Heat::RandomString
    properties:
      length: 10

  key_pair:
    type: OS::Nova::KeyPair
    properties:
      name: 
        list_join: ['-', [{ get_param: key_name }, { get_resource: random }]]
      public_key: { get_param: cluster_public_key}
      save_private_key: false

  database_network:
    type: OS::Neutron::Net
  database_subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: database_network }
      enable_dhcp: true
      cidr: { get_param: database_network_cidr }
      dns_nameservers: { get_param: dns_nameservers }

  app_network:
    type: OS::Neutron::Net
  app_subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: app_network }
      enable_dhcp: true
      cidr: { get_param: app_network_cidr }
      dns_nameservers: { get_param: dns_nameservers }

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_network_id }

  database_router_iface:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_resource: router }
      subnet: { get_resource: database_subnet }

  app_router_iface:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_resource: router }
      subnet: { get_resource: app_subnet }

  ## END Network ##
  ## START App ##
  app_software_config_01:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          #template: { get_param: service_boot_script }
          template: { get_file: "{{ current_path }}/refapp/templates/scripts/service_boot.sh" }
          #template: { get_file: "https://github.com/mattymo/scale-scenarios/raw/master/rally-scenarios/refapp/templates/scripts/service_boot.sh" }
          #template: { get_file: "./scripts/service_boot.sh" }
          params:
            $node_number: '01'
            $wait_condition_notify: { get_attr: [ wait_handle, curl_cli ] }
            $node_01_ip: { get_attr: [app_private_server_01_port, fixed_ips, 0, ip_address] }
            $node_02_ip: { get_attr: [app_private_server_02_port, fixed_ips, 0, ip_address] }
            $node_03_ip: { get_attr: [app_private_server_03_port, fixed_ips, 0, ip_address] }
            $database_admin_password: { get_param: database_admin_password }
            $service_type: "app"
            $database_vip: { get_attr: [lb, vip_address ] }
            $app_docker_image: { get_param: app_docker_image }
            $app_port: { get_param: app_port }

  app_install_config_agent_01:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
      - config: {get_resource: app_software_config_01}

  app_software_config_02:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: { get_file: "{{ current_path }}/refapp/templates/scripts/service_boot.sh" }
          params:
            $node_number: '02'
            $wait_condition_notify: { get_attr: [ wait_handle, curl_cli ] }
            $node_01_ip: { get_attr: [app_private_server_01_port, fixed_ips, 0, ip_address] }
            $node_02_ip: { get_attr: [app_private_server_02_port, fixed_ips, 0, ip_address] }
            $node_03_ip: { get_attr: [app_private_server_03_port, fixed_ips, 0, ip_address] }
            $database_admin_password: { get_param: database_admin_password }
            $service_type: "app"
            $database_vip: { get_attr: [lb, vip_address ] }
            $app_docker_image: { get_param: app_docker_image }
            $app_port: { get_param: app_port }

  app_install_config_agent_02:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
      - config: {get_resource: app_software_config_02}

  app_software_config_03:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: { get_file: "{{ current_path }}/refapp/templates/scripts/service_boot.sh" }
          params:
            $node_number: '03'
            $wait_condition_notify: { get_attr: [ wait_handle, curl_cli ] }
            $node_01_ip: { get_attr: [app_private_server_01_port, fixed_ips, 0, ip_address] }
            $node_02_ip: { get_attr: [app_private_server_02_port, fixed_ips, 0, ip_address] }
            $node_03_ip: { get_attr: [app_private_server_03_port, fixed_ips, 0, ip_address] }
            $database_admin_password: { get_param: database_admin_password }
            $service_type: "app"
            $database_vip: { get_attr: [lb, vip_address ] }
            $app_docker_image: { get_param: app_docker_image }
            $app_port: { get_param: app_port }

  app_install_config_agent_03:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
      - config: {get_resource: app_software_config_03}

  app-server-01:
    type: OS::Nova::Server
#    depends_on:
#      - key_pair
    properties:
      image: { get_param: database_image }
      flavor: { get_param: database_flavor }
      key_name: { get_resource: key_pair }
      availability_zone: { get_param: instance_01_az }
      networks:
        - port: { get_resource: app_private_server_01_port }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource:  app_install_config_agent_01}

  app-server-02:
    depends_on:
      - app-server-01
#      - key_pair
    type: OS::Nova::Server
    properties:
      image: { get_param: database_image }
      flavor: { get_param: database_flavor }
      key_name: { get_resource: key_pair }
      availability_zone: { get_param: instance_02_az }
      networks:
        - port: { get_resource: app_private_server_02_port }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource:  app_install_config_agent_02}

  app-server-03:
    depends_on:
      - server-01
#      - key_pair
    type: OS::Nova::Server
    properties:
      image: { get_param: database_image }
      flavor: { get_param: database_flavor }
      key_name: { get_resource: key_pair }
      availability_zone: { get_param: instance_03_az }
      networks:
        - port: { get_resource: app_private_server_03_port }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource:  app_install_config_agent_03}

  app_private_server_01_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: app_network }
      port_security_enabled: false
      fixed_ips:
        - subnet: { get_resource: app_subnet }

  app_private_server_02_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: app_network }
      port_security_enabled: false
      fixed_ips:
        - subnet: { get_resource: app_subnet }

  app_private_server_03_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: app_network }
      port_security_enabled: false
      fixed_ips:
        - subnet: { get_resource: app_subnet }

  app_server_01_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_network_id }
      port_id: { get_resource: app_private_server_01_port }

  app_server_02_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_network_id }
      port_id: { get_resource: app_private_server_02_port }

  app_server_03_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_network_id }
      port_id: { get_resource: app_private_server_03_port }

  wait_handle:
    type: OS::Heat::WaitConditionHandle
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      timeout: { get_param: boot_timeout }
      count: 3

  app_lb:
    type: OS::Octavia::LoadBalancer
    properties:
      vip_subnet: { get_resource: app_subnet }

  app_listener:
    type: OS::Octavia::Listener
    properties:
      loadbalancer: {get_resource: app_lb}
      protocol: HTTP
      protocol_port: {get_param: app_port}

  app_pool:
    type: OS::Octavia::Pool
    properties:
      listener: {get_resource: app_listener}
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP

  ap_lb_monitor:
    type: OS::Octavia::HealthMonitor
    properties:
      pool: { get_resource: app_pool }
      type: HTTP
      delay: 5
      max_retries: 5
      timeout: 5

  app_pool_member1:
    type: OS::Octavia::PoolMember
    properties:
      pool: { get_resource: app_pool }
      address: { get_attr: [ server-01, first_address ]}
      protocol_port: {get_param: app_port}
      subnet: { get_resource: app_subnet }

  app_pool_member2:
    type: OS::Octavia::PoolMember
    properties:
      pool: { get_resource: app_pool }
      address: { get_attr: [ server-02, first_address ]}
      protocol_port: {get_param: app_port}
      subnet: { get_resource: app_subnet }

  app_pool_member3:
    type: OS::Octavia::PoolMember
    properties:
      pool: { get_resource: app_pool }
      address: { get_attr: [ server-03, first_address ]}
      protocol_port: {get_param: app_port}
      subnet: { get_resource: app_subnet }

  # assign a floating ip address to the load balancer
  # pool.
  lb_floating:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: {get_param: public_network_id}
      port_id: {get_attr: [app_lb, vip_port_id]}

  ## END App ##
  ## START Database ##
  software_config_01:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: { get_file: "{{ current_path }}/refapp/templates/scripts/service_boot.sh" }
          params:
            $node_number: '01'
            $wait_condition_notify: { get_attr: [ wait_handle_01, curl_cli ] }
            $node_01_ip: { get_attr: [private_server_01_port, fixed_ips, 0, ip_address] }
            $node_02_ip: { get_attr: [private_server_02_port, fixed_ips, 0, ip_address] }
            $node_03_ip: { get_attr: [private_server_03_port, fixed_ips, 0, ip_address] }
            $database_admin_password: { get_param: database_admin_password }
            $service_type: "database"

  install_config_agent_01:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
      - config: {get_resource: software_config_01}

  software_config_02:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: { get_file: "{{ current_path }}/refapp/templates/scripts/service_boot.sh" }
          params:
            $node_number: '02'
            $wait_condition_notify: { get_attr: [ wait_handle_0x, curl_cli ] }
            $node_01_ip: { get_attr: [private_server_01_port, fixed_ips, 0, ip_address] }
            $node_02_ip: { get_attr: [private_server_02_port, fixed_ips, 0, ip_address] }
            $node_03_ip: { get_attr: [private_server_03_port, fixed_ips, 0, ip_address] }
            $database_admin_password: { get_param: database_admin_password }
            $service_type: "database"

  install_config_agent_02:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
      - config: {get_resource: software_config_02}

  software_config_03:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: { get_file: "{{ current_path }}/refapp/templates/scripts/service_boot.sh" }
          params:
            $node_number: '03'
            $wait_condition_notify: { get_attr: [ wait_handle_0x, curl_cli ] }
            $node_01_ip: { get_attr: [private_server_01_port, fixed_ips, 0, ip_address] }
            $node_02_ip: { get_attr: [private_server_02_port, fixed_ips, 0, ip_address] }
            $node_03_ip: { get_attr: [private_server_03_port, fixed_ips, 0, ip_address] }
            $database_admin_password: { get_param: database_admin_password }
            $service_type: "database"

  install_config_agent_03:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
      - config: {get_resource: software_config_03}

  server-01:
    type: OS::Nova::Server
#    depends_on:
##      - key_pair
    properties:
      image: { get_param: database_image }
      flavor: { get_param: database_flavor }
      key_name: { get_resource: key_pair }
      availability_zone: { get_param: instance_01_az }
      networks:
        - port: { get_resource: private_server_01_port }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource:  install_config_agent_01}

  server-02:
    depends_on:
      - wait_condition_01
#      - key_pair
    type: OS::Nova::Server
    properties:
      image: { get_param: database_image }
      flavor: { get_param: database_flavor }
      key_name: { get_resource: key_pair }
      availability_zone: { get_param: instance_02_az }
      networks:
        - port: { get_resource: private_server_02_port }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource:  install_config_agent_02}

  server-03:
    depends_on:
      - wait_condition_01
#      - key_pair
    type: OS::Nova::Server
    properties:
      image: { get_param: database_image }
      flavor: { get_param: database_flavor }
      key_name: { get_resource: key_pair }
      availability_zone: { get_param: instance_03_az }
      networks:
        - port: { get_resource: private_server_03_port }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource:  install_config_agent_03}

  private_server_01_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: database_network }
      port_security_enabled: false
      fixed_ips:
        - subnet: { get_resource: database_subnet }

  private_server_02_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: database_network }
      port_security_enabled: false
      fixed_ips:
        - subnet: { get_resource: database_subnet }

  private_server_03_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: database_network }
      port_security_enabled: false
      fixed_ips:
        - subnet: { get_resource: database_subnet }

  server_01_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_network_id }
      port_id: { get_resource: private_server_01_port }

  server_02_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_network_id }
      port_id: { get_resource: private_server_02_port }

  server_03_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_network_id }
      port_id: { get_resource: private_server_03_port }

  vol_01:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }

  vol_01_attach:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: server-01 }
      volume_id: { get_resource: vol_01 }
      mountpoint: /dev/vdb

  vol_02:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }

  vol_02_attach:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: server-02 }
      volume_id: { get_resource: vol_02 }
      mountpoint: /dev/vdb

  vol_03:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }

  vol_03_attach:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: server-03 }
      volume_id: { get_resource: vol_03 }
      mountpoint: /dev/vdb

  wait_handle_01:
    type: OS::Heat::WaitConditionHandle
  wait_condition_01:
    depends_on:
      - server-01
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle_01 }
      timeout: { get_param: boot_timeout }
      count: 1

  wait_handle_0x:
    type: OS::Heat::WaitConditionHandle
  wait_condition_0x:
    depends_on:
      - server-02
      - server-03
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle_0x }
      timeout: { get_param: boot_timeout }
      count: 2

  lb:
    type: OS::Octavia::LoadBalancer
    properties:
      vip_subnet: { get_resource: database_subnet }

  listener:
    type: OS::Octavia::Listener
    properties:
      loadbalancer: {get_resource: lb}
      protocol: TCP
      protocol_port: 3306

  pool:
    type: OS::Octavia::Pool
    properties:
      listener: {get_resource: listener}
      lb_algorithm: SOURCE_IP
      protocol: TCP
      session_persistence:
        type: SOURCE_IP

  lb_monitor:
    type: OS::Octavia::HealthMonitor
    properties:
      pool: { get_resource: pool }
      type: TCP
      delay: 5
      max_retries: 5
      timeout: 5

  pool_member1:
    type: OS::Octavia::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [ server-01, first_address ]}
      protocol_port: 3306
      subnet: { get_resource: database_subnet }

  pool_member2:
    type: OS::Octavia::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [ server-02, first_address ]}
      protocol_port: 3306
      subnet: { get_resource: database_subnet }

  pool_member3:
    type: OS::Octavia::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [ server-03, first_address ]}
      protocol_port: 3306
      subnet: { get_resource: database_subnet }
  ## END Database ##

outputs:
  app_url:
    description: API url for the reference application
    value:
      make_url:
        scheme: http
        host: { get_attr: [ lb_floating, floating_ip_address ] }
        port: { get_param: app_port }
  app_private_ips:
    description: Private IP addresses of app nodes
    value: [ { get_attr: [app_private_server_01_port, fixed_ips, 0, ip_address] }, { get_attr: [app_private_server_02_port, fixed_ips, 0, ip_address] }, { get_attr: [app_private_server_03_port, fixed_ips, 0, ip_address] } ]
  app_vip:
    description: VIP address of app
    value: { get_attr: [ lb_floating, floating_ip_address ] }
  app_floating_ips:
    description: App instances floating IPs
    value: [ {get_attr: [ app_server_01_floating_ip, floating_ip_address ]}, {get_attr: [ app_server_02_floating_ip, floating_ip_address ]}, {get_attr: [ app_server_03_floating_ip, floating_ip_address ]}]

